# Import streamlit
import streamlit as st

# Import EDA libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use("Agg")
import seaborn as sns
import altair as alt

# TextRank algorithm
from gensim.summarization import summarize

#LexRank algorightm
from sumy.parsers.plaintext import PlaintextParser
from sumy.nlp.tokenizers import Tokenizer
from sumy.summarizers.lex_rank import LexRankSummarizer


# function for lex rank summarization

def sumy_summarizer(docx,num=2):
    parser = PlaintextParser.from_string(docx,Tokenizer("english"))
    lex_summarizer = LexRankSummarizer()
    summary = lex_summarizer(parser.document, num) 
    summary_list = [str(sentence) for sentence in summary]
    result = ' '.join(summary_list)
    return result


# function to find out rouge score (Evaluating summary)
from rouge import Rouge

def evaluate_summary(summary,reference):
    r = Rouge()
    eval_score = r.get_scores(summary, reference)
    eval_score_df=pd.DataFrame(eval_score[0])
    return eval_score_df


# Main method
def main():
    """A simple summarization app"""
    st.title("SUMMARIZER APP")
    menu = ["Home", "About"]
    choice = st.sidebar.selectbox("Menu", menu)
    if choice == "Home":
        st.subheader("Summarization")
        raw_text = st.text_area("Enter Text Here", height = 200)
        if st.button("Summarize"):
            
            with st.beta_expander("Original Text"):
                st.write(raw_text)

            # Creating Layout
            c1,c2=st.beta_columns(2)


            # Layout 1 desing and content    
            with c1:
                with st.beta_expander("Lex Summary"):
                    my_summary = sumy_summarizer(raw_text)
                    st.write(my_summary) 
                    document_len = {"Original":len(raw_text),"Summary":len(my_summary)}
                    st.write(document_len)

                    st.info("Rouge Score")                   
                    score = evaluate_summary(my_summary, raw_text)
                    st.write(score)

                    score["metrics"] = score.index
                    c = alt.Chart(score).mark_bar().encode(x="metrics",y="rouge-l")
                    st.altair_chart(c)



            # Layout 2 desing and content
            with c2:
                with st.beta_expander("Text Summary"):
                    my_summary = summarize(raw_text)
                    st.write(my_summary)
                    document_len = {"Original":len(raw_text),"Summary":len(my_summary)}
                    st.write(document_len)


                    st.info("Rouge Score")
                    score = evaluate_summary(my_summary, raw_text)
                    st.write(score)
                
                    score["metrics"] = score.index
                    c = alt.Chart(score).mark_bar().encode(x="metrics",y="rouge-l")
                    st.altair_chart(c)

    else:
        st.subheader("About")
        st.text("This is a summarizer app, which summarizes huge text to a few lines -- Developed by Manjunath Sirur (SD @ OG Healthcare)")


if __name__ == '__main__':
    main()
